LIBDIR = ./rust/target/release
STATLIB = $(LIBDIR)/librpolars.a
PKG_LIBS = -L$(LIBDIR) -lrpolars
RPOLARS_RUST_SOURCE ?= ./rust
RPOLARS_CARGO_CLEAN_DEPS ?= nope
rpolars_ext_binary = "$(RPOLARS_RUST_SOURCE)/target/release/librpolars.a"
fetch_premade_binary = "true"
rpolars_url_binary = "https://github.com/pola-rs/r-polars/releases/v0.4.3_binary/download/rpolars__x86_64-apple-darwin17.a"

all: C_clean

$(SHLIB): $(STATLIB)

$(STATLIB):

	# Get pre-made binary, then rustc/cargo toolchain is not needed
	if [ -f "$(fetch_premade_binary)"  == "true"]; \
	then \
	    mkdir -p $(LIBDIR); \
    	curl -L -o $(STATLIB) $(rpolars_url_binary); \
	fi

	# compile binary self here (may areaady be compiled in RPOLARS_RUST_SOURCE dir via cache)
	curdir=$(CURDIR)
	cd $(RPOLARS_RUST_SOURCE)/..
	cargo build --lib --release --manifest-path="$(RPOLARS_RUST_SOURCE)/Cargo.toml"
	cd $(curdir)

	# if compilation did take place "here" but in RPOLARS_RUST_SOURCE then symlink the binary to here
	if [ -f "$(STATLIB)" ]; \
	then \
	echo "file is there: "; \
	else \
	echo "no, file is NOT there: "; \
	mkdir -p ./rust/target/release ; \
	echo "trying to symlink in $(rpolars_ext_binary)"; \
	ln -s $(rpolars_ext_binary) ./rust/target/release/librpolars.a ; \
	fi

	# clean up any kind of files R CMD check does not like
	if [ "${RPOLARS_CARGO_CLEAN_DEPS}" == "true" ]; \
	then \
	echo "cleanup!!" ; \
	mv $(STATLIB) $(LIBDIR)/../temp_binary.a; \
	rm -rf $(LIBDIR); \
	mkdir $(LIBDIR); \
	mv $(LIBDIR)/../temp_binary.a $(STATLIB); \
	rm -rf ./src/.cargo; \
	else \
	echo "hands off!!" ; \
	fi


C_clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS)

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) rust/target
