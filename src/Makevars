LIBDIR = ./rust/target/release
STATLIB = $(LIBDIR)/librpolars.a
PKG_LIBS = -L$(LIBDIR) -lrpolars
RPOLARS_RUST_SOURCE ?= ./rust
RPOLARS_CARGO_CLEAN_DEPS ?= nope
rpolars_ext_binary = "$(RPOLARS_RUST_SOURCE)/target/release/librpolars.a"
fetch_premade_binary = true
rpolars_url_binary_1 = https://github.com/pola-rs/r-polars/releases/download/m1test12/rpolars_binary_x86_64-apple-darwin.a
rpolars_url_binary_2 = https://github.com/pola-rs/r-polars/releases/download/m1test12/rpolars_binary_aarch64-apple-darwin.a
env_arch ?= not_set

all: C_clean

$(SHLIB): $(STATLIB)

$(STATLIB):
	echo ${env_arch}
	# arch cross compile arch
	if [ "${env_arch}" == "x86_64" ]; \
	then \
		rpolars_url_binary="${rpolars_url_binary_1}"; \
	else \
		rpolars_url_binary="${rpolars_url_binary_2}"; \
	fi; \
	echo $$rpolars_url_binary; \
	if [ "$(fetch_premade_binary)"  == "true" ]; \
	then \
			echo "fetch!!"; \
	    mkdir -p $(LIBDIR); \
    	curl -L -o $(STATLIB) $$rpolars_url_binary; \
  else \
		curdir=$(CURDIR); \
		cd $(RPOLARS_RUST_SOURCE)/..; \
		cargo build --lib --release --manifest-path="$(RPOLARS_RUST_SOURCE)/Cargo.toml"; \
		cd $(curdir); \
	fi



	# if compilation did take place "here" but in RPOLARS_RUST_SOURCE then symlink the binary to here
	if [ -f "$(STATLIB)" ]; \
	then \
	echo "file is there: "; \
	else \
	echo "no, file is NOT there: "; \
	mkdir -p ./rust/target/release ; \
	echo "trying to symlink in $(rpolars_ext_binary)"; \
	ln -s $(rpolars_ext_binary) ./rust/target/release/librpolars.a ; \
	fi

	# clean up any kind of files R CMD check does not like
	if [ "${RPOLARS_CARGO_CLEAN_DEPS}" == "true" ]; \
	then \
	echo "cleanup!!" ; \
	mv $(STATLIB) $(LIBDIR)/../temp_binary.a; \
	rm -rf $(LIBDIR); \
	mkdir $(LIBDIR); \
	mv $(LIBDIR)/../temp_binary.a $(STATLIB); \
	rm -rf ./src/.cargo; \
	else \
	echo "hands off!!" ; \
	fi


C_clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS)

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) rust/target
